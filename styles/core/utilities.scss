@use '/styles/core/core' as *;

//***********************************************************************
//  Border
//***********************************************************************
.border {
    border: 1px solid $border-color;
    @include darkmode { border-color: $dark-border-color; }
}

.border-t {
    border-top: 1px solid $border-color;
    @include darkmode { border-color: $dark-border-color; }
}

.border-b {
    border-bottom: 1px solid $border-color;
    @include darkmode { border-color: $dark-border-color; }
}

.border-l {
    border-left: 1px solid $border-color;
    @include darkmode { border-color: $dark-border-color; }
}

.border-r {
    border-right: 1px solid $border-color;
    @include darkmode { border-color: $dark-border-color; }
}

.border-x {
    border-left: 1px solid $border-color;
    border-right: 1px solid $border-color;
    @include darkmode { border-color: $dark-border-color; }
}

.border-y {
    border-top: 1px solid $border-color;
    border-bottom: 1px solid $border-color;
    @include darkmode { border-color: $dark-border-color; }
}

//***********************************************************************
//  Display
//***********************************************************************
.hidden-bp-up {
    @include breakpoint-up {
        display: none !important;
    }
}

.hidden-bp-down {
    @include breakpoint-down {
        display: none !important;
    }
}

.hidden-lightmode {
    @media (prefers-color-scheme: light) {
        display: none !important;
    }
}

.hidden-darkmode {
    @include darkmode {
        display: none !important;
    }
}

//***********************************************************************
//  Image
//***********************************************************************
.img-fluid {
    max-width: 100%;
    height: auto;
}

//***********************************************************************
//  Embed
//***********************************************************************
$embed-ratio: (1 1), (16 9), (21, 9), (4 3), (3 1), (2 1);

.embed {
    display: block;
    width: 100%;
    padding: 0;
    overflow: hidden;

    background-size: cover;
    background-repeat: no-repeat;
    background-position: center;

    > * {
        width: 100%;
        height: 100% !important;
        border: 0;
    }

    img {
        object-fit: cover;
    }

    a & {
        margin-bottom: 0;
    }
}

@each $value in $embed-ratio {
    .embed-#{nth($value, 1)}by#{nth($value, 2)} {
        aspect-ratio: calc(nth($value, 1) / nth($value, 2));

        &.portrait {
            aspect-ratio: calc(nth($value, 2) / nth($value, 1));
        }
    }

    @include breakpoint-up {
        .lg\:embed-#{nth($value, 1)}by#{nth($value, 2)} {
            aspect-ratio: calc(nth($value, 1) / nth($value, 2));

            &.portrait {
                aspect-ratio: calc(nth($value, 2) / nth($value, 1));
            }
        }
    }
}

.embed-1vh {
    height: 100vh;
    height: 100svh;
}

.lg\:embed-1vh {
    @include breakpoint-up {
        height: 100vh;
        height: 100svh;
    }
}

//***********************************************************************
//  Hover
//***********************************************************************
.hover-border {
    display: block;
    position: relative;

    &::after {
        content: '';
        pointer-events: none;
        position: absolute;
        z-index: 10;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        border: $border-width solid $link-color;
        opacity: 0;
        transition: opacity $duration linear;
    }

    @include focus-mouse {
        &::after {
            opacity: 1;
        }
    }
}

.hover-zoom {
    transition: transform 800ms $easeOutQuint;

    @include focus-mouse {
        transform: scale(1.03);
    }
}

.hover-opacity {
    display: block;
    transition: opacity $duration linear;

    @include focus-mouse {
        opacity: 0.85;
    }
}

.hover-icon-right {
    @include hover-mouse {
        [class*='material-icons'] {
            animation: anim_iconslide_right $duration $easing;
        }
    }
}

.hover-icon-left {
    @include hover-mouse {
        [class*='material-icons'] {
            animation: anim_iconslide_left $duration $easing;
        }
    }
}

.hover-icon-top {
    @include hover-mouse {
        [class*='material-icons'] {
            animation: anim_iconslide_top $duration $easing;
        }
    }
}

.hover-icon-bottom {
    @include hover-mouse {
        [class*='material-icons'] {
            animation: anim_iconslide_bottom $duration $easing;
        }
    }
}

@keyframes anim_iconslide_right {
    0% { transform: translate(0, 0); opacity: 1; }
    50% { transform: translate(100%, 0); opacity: 0; }
    51% { transform: translate(-100%, 0); opacity: 0; }
    100% { transform: translate(0, 0); opacity: 1; }
}

@keyframes anim_iconslide_left {
    0% { transform: translate(0, 0); opacity: 1; }
    50% { transform: translate(-100%, 0); opacity: 0; }
    51% { transform: translate(100%, 0); opacity: 0; }
    100% { transform: translate(0, 0); opacity: 1; }
}

@keyframes anim_iconslide_top {
    0% { transform: translate(0, 0); opacity: 1; }
    50% { transform: translate(0, -100%); opacity: 0; }
    51% { transform: translate(0, 100%); opacity: 0; }
    100% { transform: translate(0, 0); opacity: 1; }
}

@keyframes anim_iconslide_bottom {
    0% { transform: translate(0, 0); opacity: 1; }
    50% { transform: translate(0, 100%); opacity: 0; }
    51% { transform: translate(0, -100%); opacity: 0; }
    100% { transform: translate(0, 0); opacity: 1; }
}

//***********************************************************************
//  Generate Utilities
//***********************************************************************
$utilities: () !default;
$utilities: map-merge(
    (
        // Color
        //***************************************************************
        "text-color": (
            important: true,
            property: color,
            class: text,
            values: map-merge($themes, (reset: inherit))
        ),

        "bg-color": (
            important: true,
            property: background-color,
            class: bg,
            values: map-merge($themes, (transparent: transparent))
        ),

        "border-color": (
            important: true,
            property: border-color,
            class: border,
            values: $themes
        )
    ),
    $utilities
);

@each $name in map-keys($grid-breakpoints) {
    @include breakpoint-up($name) {
        $infix: breakpoint-infix($name, $grid-breakpoints);

        @each $name, $utility in $utilities {
            @if type-of($utility) == "map" and (map-get($utility, responsive) or $infix == "") {
                $values: map-get($utility, values);

                @if type-of($values) == "string" or type-of(nth($values, 1)) != "list" {
                    $values: zip($values, $values);
                }

                @each $key, $value in $values {
                    $properties: map-get($utility, property);
                    $property-class: if(map-has-key($utility, class), map-get($utility, class), nth($properties, 1));
                    $property-class-modifier: if($key, if($property-class == "" and $infix == "", "", "-") + $key, "");

                    .#{$infix + $property-class + $property-class-modifier} {
                        @each $property in $properties {
                            #{$property}: $value if(map-get($utility, important), !important, null);
                        }

                        // Custom
                        @if $name == 'bg-color' and $value != white {
                            color: white !important;
                        }
                    }
                }
            }
        }
    }
}

.bg-muted {
    background-color: $muted-bg;

    @include darkmode {
        background-color: $dark-muted-bg;
    }
}

.bg-light {
    background-color: $body-bg;
}

.bg-dark {
    background-color: $dark-body-bg;
}